Republican = No_Republican / TotalTrial,
Democratic = No_Democratic / TotalTrial
)
# Comments: sub1 data generates variable based on four types of avg group by Type and Date but does not take electoral votes into account
sub1 <- subdata1 %>%
select(Date, Type, Democratic) %>%  # Select relevant columns
pivot_wider(names_from = Type, values_from = Democratic, names_prefix = "avg_")%>%
arrange(Date)
# Comments: sub2 includes total observations for each type per day but does not take electoral votes into account
sub2 <-subdata1 %>%
select(Date, Type, No_Democratic) %>%  # Select relevant columns
pivot_wider(names_from = Type, values_from = No_Democratic, names_prefix = "Count_")%>%
arrange(Date)
# Comment: subdata2 creates the probability of aggregated state winner by Date and Type
# Creating the second subset with state-specific totals and proportions
# ******************Percent_byState variable used for state-level time series
subdata2 <- melted_data %>%
mutate(StateFull = state.name[match(state, state.abb)])%>%
mutate(StateFull = ifelse(state == "DC", "District of Columbia", StateFull))%>%
group_by(Date, Type, state, StateFull) %>%
summarise(
Percent_byState = mean(value, na.rm = TRUE),
TotalTrial_byState = n(),
No_Republican_State = sum(value == 1, na.rm = TRUE),
No_Democratic_State = sum(value == 0, na.rm = TRUE),
.groups = 'drop'
)  %>%
mutate(Percent_byState_chr=sprintf("%1.2f%%", 100*Percent_byState))%>%
mutate(Percent_byState_Demo=round(1-Percent_byState, digits=3))%>%
mutate(Percent_byState_chr_Demo=sprintf("%1.2f%%", 100*Percent_byState_Demo))
#------for data2 no news  and news
subdata2_news <- subdata2 %>%
select(-TotalTrial_byState,-No_Democratic_State,-Percent_byState,-No_Republican_State,-Percent_byState_chr)%>%
mutate(Predicted_party=ifelse(Percent_byState_Demo>=0.5, "Democratic", "Republican"))
subdata2_nonews <- melted_data2 %>%
mutate(StateFull = state.name[match(state, state.abb)])%>%
mutate(StateFull = ifelse(state == "DC", "District of Columbia", StateFull))%>%
group_by(Date, Type, state, StateFull) %>%
summarise(
Percent_byState = mean(value, na.rm = TRUE),
TotalTrial_byState = n(),
No_Republican_State = sum(value == 1, na.rm = TRUE),
No_Democratic_State = sum(value == 0, na.rm = TRUE),
.groups = 'drop'
)  %>%
mutate(Percent_byState_chr=sprintf("%1.2f%%", 100*Percent_byState))%>%
mutate(Percent_byState_Demo=round(1-Percent_byState, digits=3))%>%
mutate(Percent_byState_chr_Demo=sprintf("%1.2f%%", 100*Percent_byState_Demo))%>%
select(-TotalTrial_byState,-No_Democratic_State,-Percent_byState,-No_Republican_State,-Percent_byState_chr)%>%
rename(
Percent_byState_Demo2=Percent_byState_Demo,
Percent_byState_chr_Demo2=Percent_byState_chr_Demo)%>%
mutate(Predicted_party2=ifelse(Percent_byState_Demo2>=0.5, "Democratic", "Republican"))
#this is the combined news and no news data for switch purpose
news_nonews<-subdata2_news%>%
left_join(subdata2_nonews, by=c("Date","Type","state","StateFull"))
#-----------------Combine news and no news
# Creating the second subset with state-specific totals,showing total trial for specific day with value 1 or 2
subdata3 <- melted_data %>%
mutate(StateFull = state.name[match(state, state.abb)]) %>%
group_by(Date, StateFull, Type, state, value) %>%
summarise(
TotalTrial_byStatebyParty = n()
)
.groups = 'drop'
# Create the dataframe
# ***********Final dataset for state map and state level time series trend
extended_data <- melted_data %>%
left_join(subdata1, by = c("Type", "Date")) %>%
left_join(subdata2, by = c("Date","Type", "state"))%>%
left_join(subdata3, by = c("Date","Type", "state", "value")) %>%
mutate(Percent_byStateParty=TotalTrial_byStatebyParty/TotalTrial_byState) %>%
mutate(Date=as.Date(Date)) %>%
mutate(year = as.numeric(format(as.Date(Date), "%Y")))%>%
mutate(abb=state)%>%
mutate(Predicted_party=ifelse(Percent_byState>=0.5, "Republican", "Democratic")) %>%
select(-StateFull.y) %>%
rename(
StateFull=StateFull.x)
extended_data2<-extended_data%>%
select(Date,Type,party,StateFull,state,Percent_byState_Demo,Percent_byState_chr_Demo,Percent_byStateParty,Predicted_party)%>%
distinct(Date,Type,party,StateFull,state,Percent_byState_Demo,Percent_byState_chr_Demo,Percent_byStateParty,Predicted_party)
#extended_data2_check<-melted_data%>%
#filter(Type=="Fox")%>%
#filter(state=="NC")%>%
#filter(Date=="2024-8-20")
#View(extended_data2_check)
# Create the dc_data with DC information for each Date and Type
dates <-unique(extended_data2$Date)
dc_data <- expand.grid(
state = "DC",
StateFull = "District of Columbia",
party = "Democratic",
Predicted_party = "Democratic",
Percent_byState_Demo = 1,
Percent_byState_chr_Demo = "100.00%",
Percent_byStateParty = 1,
Type = c("Direct", "MSNBC", "BBC", "Fox"),  # The four types
Date = dates
)
# Ensure the column order is the same as in extended_data2
# Combine the original data with the dc_data and ensure it is sorted by Date, Type, and state
extended_data2 <- rbind(extended_data2, dc_data) %>%
arrange(Date, Type, state)
# method #1 calculate the average winning probability in each state and assign the electoral votes
subdata2_1 <-subdata2%>%
left_join(electoral_votes, by="state")%>%
select(Date,Type,state,Percent_byState_Demo,Electoral_Votes)%>%
#filter(Date=="2024-08-13")%>%
mutate(proj_party=ifelse(Percent_byState_Demo>=0.5, "Democratic", "Republican"))
subdata2_2 <-subdata2_1%>%
group_by(Date, proj_party,Type) %>%
summarize(
Total_votes = sum(Electoral_Votes)
)
# number should be 535 for now
trials<-subdata2_1 %>%
group_by(Date,Type)%>%
summarize(
Votes = sum(Electoral_Votes)
)
votes_trials_percent<-subdata2_2 %>%
left_join(trials,by=c("Type","Date")) %>%
mutate(votes_percent=Total_votes/Votes) %>%
select(Date, Type,proj_party, votes_percent) %>%
pivot_wider(names_from = Type, values_from = votes_percent, names_prefix = "Votes_percent_")
votes_trials<-subdata2_2 %>%
select(Date, Type,proj_party, Total_votes) %>%  # Select relevant columns
pivot_wider(names_from = Type, values_from = Total_votes, names_prefix = "Votes_")%>%
arrange(Date)
subdata2_reshape <-votes_trials%>%
left_join(votes_trials_percent, by=c("Date","proj_party")) %>%
filter(proj_party=="Democratic")%>%
arrange(Date) %>%
filter(proj_party=="Democratic")
.groups = 'drop'
#*******************************************************************
subdata2_reshape <- subdata2_reshape %>%
ungroup()
#*******************************************************************
##method #2 assign the votes first and then calculate the average
subdata3_1<-melted_data %>%
group_by(Type, Trial, Date,party) %>%
summarise(
Number_Repub_Win = n(),
votes_party =sum(Electoral_Votes),
.groups = 'drop'
)
subdata3_1_for_sentiment<-melted_data %>%
group_by(Type, Trial, Date,party) %>%
summarise(
Number_Repub_Win = n(),
votes_party =sum(Electoral_Votes),
.groups = 'drop'
) %>% filter(party=="Democratic") %>%
mutate(percent_by_trail=votes_party/538)
subdata3_1_2<-melted_data %>%
group_by(Type, Date, party) %>%
summarise(
Number_Repub_Win = n(),
votes_party =sum(Electoral_Votes),
.groups = 'drop'
) %>%
arrange(Date)
#calculate total number of votes
subdata3_2_2<-melted_data %>%
group_by(Type, Date) %>%
summarise(
Votes =sum(Electoral_Votes),
.groups = 'drop'
)
subdata3_2_reshape<-subdata3_1_2%>%
left_join(subdata3_2_2,by=c("Type","Date")) %>%
mutate(Votes_perent=votes_party/Votes) %>%
select(Date, Type,party, Votes_perent) %>%  # Select relevant columns
pivot_wider(names_from = Type, values_from = Votes_perent, names_prefix = "Votes_")%>%
filter(party=="Democratic")%>%
arrange(Date)
.groups = 'drop'
# calculate total trials for each type each date for both parties, should be 100 per day for each type but we lose trials
trial_counts<-subdata3_1 %>%
group_by(Type,Date) %>%
mutate(trial_counts= n_distinct(Trial))%>%
select(Type,Date,party,trial_counts)%>%
distinct() # drop duplicates
.groups = 'drop'
trial_votes<-melted_data %>%
group_by(Type, Date,party) %>%
summarise(
votes_party =sum(Electoral_Votes),
.groups = 'drop'
) %>%
left_join(trial_counts, by=c("party","Type","Date" ))%>%
mutate(average_votes=votes_party/trial_counts)
#total should be 535 for now and 538 later
total_votes_count <- trial_votes %>%
select(Date, Type, average_votes) %>%
group_by(Type, Date)%>%
summarise(
votes_total=sum(average_votes)
)
# merge two datasets before reshape
trial_votes <-trial_votes%>%
left_join(total_votes_count, by=c("Type","Date" )) %>%
mutate(average_votes = round(average_votes, digits = 0)) %>%  # Round average_votes
mutate(average_votes_percent=average_votes/votes_total)
#*************** Dataset with predicted votes
#* For table
average_votes<- trial_votes %>%
select(Date, Type, party, average_votes)%>%
rename(
Voice = Type,  # Renaming 'Result' to 'value'
Party= party,
AverageVotes=average_votes)
#For graph
average_votes_reshape <- trial_votes %>%
select(Date, Type, party, average_votes) %>%  # Select relevant columns
pivot_wider(names_from = Type, values_from = average_votes, names_prefix = "Votes_")
# For table
average_votes_percent<- trial_votes %>%
select(Date, Type, party, average_votes_percent) %>%
mutate(average_votes_percent = round(average_votes_percent, digits = 2))%>%
rename(
Voice = Type,  # Renaming 'Result' to 'value'
Party= party,
WinLikelihood=average_votes_percent)
# For graph
average_votes_percent_reshape<- trial_votes %>%
select(Date, Type, party, average_votes_percent) %>%  # Select relevant columns
pivot_wider(names_from = Type, values_from = average_votes_percent, names_prefix = "Votes_Percent_")
# Final Dataset for national level winner for average votes and average votes percent
#*******************************************************************
trial_votes_reshape <-average_votes_reshape%>%
left_join(average_votes_percent_reshape, by=c("Date","party"))%>%
filter(party=="Democratic")%>%
arrange(Date)
#*******************************************************************
#***no news data
subdata3_1_nonews<-melted_data2 %>%
mutate(party = ifelse(value ==1, "Republican", "Democratic"))%>%
group_by(Type, Trial, Date,party) %>%
summarise(
Number_Repub_Win = n(),
votes_party =sum(Electoral_Votes),
.groups = 'drop'
)
subdata3_1_for_sentiment_nonews<-melted_data2 %>%
mutate(party = ifelse(value ==1, "Republican", "Democratic"))%>%
group_by(Type, Trial, Date,party) %>%
summarise(
Number_Repub_Win = n(),
votes_party =sum(Electoral_Votes),
.groups = 'drop'
) %>% filter(party=="Democratic") %>%
mutate(percent_by_trail=votes_party/538)
subdata3_1_2_nonews<-melted_data2 %>%
mutate(party = ifelse(value ==1, "Republican", "Democratic"))%>%
group_by(Type, Date, party) %>%
summarise(
Number_Repub_Win = n(),
votes_party =sum(Electoral_Votes),
.groups = 'drop'
) %>%
arrange(Date)%>% drop_na
#calculate total number of votes
subdata3_2_2_nonews<-melted_data2 %>%
mutate(party = ifelse(value ==1, "Republican", "Democratic"))%>%
group_by(Type, Date) %>%
summarise(
Votes =sum(Electoral_Votes),
.groups = 'drop'
) %>% drop_na
subdata3_2_reshape_nonews<-subdata3_1_2_nonews%>%
left_join(subdata3_2_2_nonews,by=c("Type","Date")) %>%
mutate(Votes_perent=votes_party/Votes) %>%
select(Date, Type,party, Votes_perent) %>%  # Select relevant columns
pivot_wider(names_from = Type, values_from = Votes_perent, names_prefix = "Votes_")%>%
filter(party=="Democratic")%>%
select("Date","party","Votes_Anonymous","Votes_BBC","Votes_Fox","Votes_MSNBC" )%>%
arrange(Date)
.groups = 'drop'
# calculate total trials for each type each date for both parties, should be 100 per day for each type but we lose trials
trial_counts_nonews<-subdata3_1_nonews %>%
group_by(Type,Date) %>%
mutate(trial_counts= n_distinct(Trial))%>%
select(Type,Date,party,trial_counts)%>%
distinct() # drop duplicates
.groups = 'drop'
trial_votes_nonews<-melted_data2 %>%
mutate(party = ifelse(value ==1, "Republican", "Democratic"))%>%
group_by(Type, Date,party) %>%
summarise(
votes_party =sum(Electoral_Votes),
.groups = 'drop'
) %>%
left_join(trial_counts_nonews, by=c("party","Type","Date" ))%>%
mutate(average_votes=votes_party/trial_counts)
#total should be 535 for now and 538 later
total_votes_count_nonews <- trial_votes_nonews %>%
select(Date, Type, average_votes) %>%
group_by(Type, Date)%>%
summarise(
votes_total=sum(average_votes)
)
# merge two datasets before reshape
trial_votes_nonews <-trial_votes_nonews%>%
left_join(total_votes_count_nonews, by=c("Type","Date" )) %>%
mutate(average_votes = round(average_votes, digits = 0)) %>%  # Round average_votes
mutate(average_votes_percent=average_votes/votes_total)
#*************** Dataset no news with predicted votes
#For graph
average_votes_reshape2 <- trial_votes_nonews %>%
select(Date, Type, party, average_votes) %>%  # Select relevant columns
pivot_wider(names_from = Type, values_from = average_votes, names_prefix = "NoNews_Votes_")%>%
select("Date","party","NoNews_Votes_Anonymous", "NoNews_Votes_BBC" ,"NoNews_Votes_Fox", "NoNews_Votes_MSNBC")%>%
drop_na
# For graph
average_votes_percent_reshape2<- trial_votes_nonews %>%
select(Date, Type, party, average_votes_percent) %>%  # Select relevant columns
pivot_wider(names_from = Type, values_from = average_votes_percent, names_prefix = "NoNews_Votes_Percent_")
# Final Dataset for national level winner for average votes and average votes percent
#*******************************************************************
trial_votes_reshape2 <-average_votes_reshape2%>%
left_join(average_votes_percent_reshape2, by=c("Date","party"))%>%
filter(party=="Democratic")%>%
arrange(Date)
#*******************************************************************
#****combined
combined_nonews_news<-trial_votes_reshape %>%
select(-"Votes_Percent_Anonymous", -"Votes_Percent_BBC", -"Votes_Percent_Fox", -"Votes_Percent_MSNBC") %>%
left_join(trial_votes_reshape2,by=c("Date","party" ))%>%
select("Date","party", "Votes_Anonymous", "Votes_BBC", "Votes_Fox", "Votes_MSNBC","NoNews_Votes_Anonymous", "NoNews_Votes_BBC", "NoNews_Votes_Fox", "NoNews_Votes_MSNBC")
#-------------import expert data
# ----------------------------
expert <-read_csv("expert_combined_panel.csv",show_col_types = FALSE)
expert <- expert %>%
distinct()
expert_data<-expert%>%
rename(
Date = date,  # Renaming 'Result' to 'value'
)%>%
mutate(Date = as.Date(Date, format = "%m/%d/%y")) %>%
mutate(Harris = round(Harris/100,digit=2)) %>%
mutate(Trump = round(Trump/100,digit=2))%>%
distinct()
.groups = 'drop'
# simulation
# Comment: subdata2 creates the probability of aggregated state winner by Date and Type
# Creating the second subset with state-specific totals and proportions
# ******************Percent_byState variable used for state-level time series
# Creating the second subset with state-specific totals,showing total trial for specific day with value 1 or 2
# Monte_Carlo Simulation with news
monte_carlo<-melted_data %>%
group_by(Type, Trial, Date,party) %>%
summarise(
Number_Repub_Win = n(),
TotalTrial_byVoice = n(),
votes_party =sum(Electoral_Votes),
.groups = 'drop'
) %>%
mutate(outcome = ifelse(votes_party>=270, "Winner", "Loser"))%>%
mutate(Result = ifelse(votes_party>=270, 1, 0))
monte_carlo_overall<-monte_carlo%>%
group_by(Type, Date,party) %>%
summarise(
Total_Trials=n(),
No_Win_Trial = sum(Result == 1, na.rm = TRUE),
.groups = 'drop'
) %>%
mutate(Simulation=No_Win_Trial/Total_Trials)%>%
mutate(Simulation_chr=sprintf("%1.2f%%", 100*Simulation))
monte_carlo_reshape<- monte_carlo_overall %>%
select(Date, Type, party, Simulation) %>%
mutate(Simulation=round(Simulation,digit=2))%>%
pivot_wider(names_from = Type, values_from = Simulation, names_prefix = "Trial_Percent_")
# -----------
# Monte_Carlo Simulation without news
monte_carlo2<-melted_data2 %>%
mutate(party = ifelse(value ==1, "Republican", "Democratic")) %>%
group_by(Type, Trial, Date,party) %>%
summarise(
Number_Repub_Win = n(),
TotalTrial_byVoice = n(),
votes_party =sum(Electoral_Votes),
.groups = 'drop'
) %>%
mutate(outcome = ifelse(votes_party>=270, "Winner", "Loser"))%>%
mutate(Result = ifelse(votes_party>=270, 1, 0))
monte_carlo_overall2<-monte_carlo2%>%
group_by(Type, Date,party) %>%
summarise(
Total_Trials=n(),
No_Win_Trial = sum(Result == 1, na.rm = TRUE),
.groups = 'drop'
) %>%
mutate(Simulation=No_Win_Trial/Total_Trials)%>%
mutate(Simulation_chr=sprintf("%1.2f%%", 100*Simulation))
monte_carlo_reshape2<- monte_carlo_overall2 %>%
select(Date, Type, party, Simulation) %>%
mutate(Simulation=round(Simulation,digit=2))%>%
pivot_wider(names_from = Type, values_from = Simulation, names_prefix = "Trial_Percent_")
#------------Data  process done
#write_csv(extended_data,"/Users/sunmingrun/Desktop/AI Project/panel_election_results_help.csv")
#------color
pal <- pnw_palette(name = "Bay", n = 16, type = "continuous")
color_for_1 <- pal[16]  # Close to red
color_for_0 <- pal[1]  # Close to blue
pal2<-pnw_palette(name = "Bay", n = 16, type = "continuous")
color_for_low1 <- pal2[13]
pal3<- pnw_palette("Shuksan2",5)
color_for_low0 <- pal3[2]
pal5 <- pnw_palette("Winter",100)
color_for_05 <- pal5[97]
custom_colorscale <- list(
list(0, "#DD4124"),
list(0.25, color_for_low1),
list(0.5, color_for_05),
list(0.75, color_for_low0),
list(1, "#00496F")
)
#data
#function 1 state unique label
state_group <- subdata2 %>%
select(StateFull) %>%
arrange(StateFull) %>%
distinct()
voice_group <- extended_data %>%
select(Type) %>%
arrange(Type) %>%
distinct()
party_group <- extended_data %>%
select(party) %>%
arrange(party) %>%
distinct()
filtered_data <- extended_data %>%
filter(Date == "2024-08-15")
distinct <- filtered_data %>%
distinct(Type,Date, No_Republican,No_Democratic,Republican,Democratic,TotalTrial_byState)
steps<-read_csv2("help.csv",show_col_types = FALSE)
intro <- read_csv2("intro.csv",show_col_types = FALSE)
# FLUID DESIGN FUNCTION ---------------------------------------------------
fluid_design <- function(id, w, x, y, z) {
fluidRow(
div(
id = id,
column(
width = 6,
uiOutput(w),
uiOutput(y)
),
column(
width = 6,
uiOutput(x),
uiOutput(z)
)
)
)
}
# UI
ui <- dashboardPage(
skin = "red",
title = "Presidential Election",
# HEADER ------------------------------------------------------------------
dashboardHeader(
title = span("Election GPT"),
titleWidth = 300,
dropdownMenu(
type = "notifications",
headerText = strong("HELP"),
icon = icon("question"),
badgeStatus = NULL,
notificationItem(
text = "1: Select the states for which you want to see the winning probability for each party.",
icon = icon("spinner")
),
notificationItem(
text = "2: Choose the reporting voice to generate election-result stories.",
icon = icon("user-md")
),
notificationItem(
text = "3: Select a single date for the map and use a date range for the state average Democratic victory graph.",
icon = icon("calendar")
)
),
tags$li(
a(
strong("ABOUT ElectionGPT"),
height = 40,
href = "https://github.com/scunning1975/ElectionGPT/blob/main/README.md",  # Make sure this link is correct
title = "",
target = "_blank"
),
class = "dropdown"
)
),
# SIDEBAR -----------------------------------------------------------------
expert_data
expert_data
View(expert_data)
runApp()
runApp()
expert_data
expert_nate <-expert_data%>%
filter(source="silver")
expert_nate <-expert_data%>%
filter(source=="silver")
expert_nate
View(expert_nate)
runApp()
runApp()
runApp()
runApp()
