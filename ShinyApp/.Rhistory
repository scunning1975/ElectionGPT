<<<<<<< HEAD
) %>%
mutate(outcome = ifelse(votes_party>=270, "Winner", "Loser"))%>%
mutate(Result = ifelse(votes_party>=270, 1, 0))
monte_carlo_overall2<-monte_carlo2%>%
group_by(Type, Date,party) %>%
summarise(
Total_Trials=n(),
No_Win_Trial = sum(Result == 1, na.rm = TRUE),
.groups = 'drop'
) %>%
mutate(Simulation=No_Win_Trial/Total_Trials)%>%
mutate(Simulation_chr=sprintf("%1.2f%%", 100*Simulation))
monte_carlo_reshape2<- monte_carlo_overall2 %>%
select(Date, Type, party, Simulation) %>%
mutate(Simulation=round(Simulation,digit=2))%>%
pivot_wider(names_from = Type, values_from = Simulation, names_prefix = "Trial_Percent_")
#------------Data  process done
#write_csv(extended_data,"/Users/sunmingrun/Desktop/AI Project/panel_election_results_help.csv")
#------color
pal <- pnw_palette(name = "Bay", n = 16, type = "continuous")
color_for_1 <- pal[16]  # Close to red
color_for_0 <- pal[1]  # Close to blue
#pal2<- pnw_palette("Moth",12)
#color_for_low1 <- pal2[6]
#pal4<-pnw_palette(name = "Bay", n = 16, type = "continuous")
#color_for_low0 <- pal4[5]
pal2<-pnw_palette(name = "Bay", n = 16, type = "continuous")
color_for_low1 <- pal2[13]
pal3<- pnw_palette("Shuksan2",5)
color_for_low0 <- pal3[2]
pal5 <- pnw_palette("Winter",100)
color_for_05 <- pal5[97]
news_nonews
melted_data2
=======
select(-Variable, -Variable_chr) %>%
# Remove rows where Percent_byState_Demo_Value is NA
filter(!is.na(Percent_byState_Demo_Value))
# Reshape the data with proper 'News' categorization
reshaped_data <- news_nonews %>%
pivot_longer(
cols = c(Percent_byState_Demo, Percent_byState_Demo2),
names_to = "Variable",
values_to = "Percent_byState_Demo_Value"
) %>%
pivot_longer(
cols = c(Percent_byState_chr_Demo, Percent_byState_chr_Demo2),
names_to = "Variable_chr",
values_to = "Percent_byState_chr_Demo_Value"
) %>%
# Create the 'News' column based on the presence of '2' in the original column name
mutate(News = ifelse(grepl("2", Variable), "No News", "With News")) %>%
# Drop the columns used for reshaping
select(-Variable, -Variable_chr) %>%
# Remove rows where Percent_byState_Demo_Value is NA
filter(!is.na(Percent_byState_Demo_Value))
# View the reshaped data
reshaped_data
>>>>>>> 6911aae65c39ee3dbf760987e0938b170c9f36f4
subdata2_nonews <- melted_data2 %>%
mutate(StateFull = state.name[match(state, state.abb)])%>%
mutate(StateFull = ifelse(state == "DC", "District of Columbia", StateFull))%>%
group_by(Date, Type, state, StateFull) %>%
summarise(
Percent_byState = mean(value, na.rm = TRUE),
TotalTrial_byState = n(),
No_Republican_State = sum(value == 1, na.rm = TRUE),
No_Democratic_State = sum(value == 0, na.rm = TRUE),
.groups = 'drop'
)  %>%
mutate(Percent_byState_chr=sprintf("%1.2f%%", 100*Percent_byState))%>%
mutate(Percent_byState_Demo=round(1-Percent_byState, digits=3))%>%
mutate(Percent_byState_chr_Demo=sprintf("%1.2f%%", 100*Percent_byState_Demo))%>%
select(-TotalTrial_byState,-No_Democratic_State,-Percent_byState,-No_Republican_State,-Percent_byState_chr)%>%
rename(
Percent_byState_Demo2=Percent_byState_Demo,
Percent_byState_chr_Demo2=Percent_byState_chr_Demo)
<<<<<<< HEAD
=======
subdata2_nonews
>>>>>>> 6911aae65c39ee3dbf760987e0938b170c9f36f4
subdata2_nonews <- melted_data2 %>%
mutate(StateFull = state.name[match(state, state.abb)])%>%
mutate(StateFull = ifelse(state == "DC", "District of Columbia", StateFull))%>%
group_by(Date, Type, state, StateFull) %>%
summarise(
Percent_byState = mean(value, na.rm = TRUE),
TotalTrial_byState = n(),
No_Republican_State = sum(value == 1, na.rm = TRUE),
No_Democratic_State = sum(value == 0, na.rm = TRUE),
.groups = 'drop'
)  %>%
mutate(Percent_byState_chr=sprintf("%1.2f%%", 100*Percent_byState))%>%
mutate(Percent_byState_Demo=round(1-Percent_byState, digits=3))%>%
mutate(Percent_byState_chr_Demo=sprintf("%1.2f%%", 100*Percent_byState_Demo))%>%
select(-TotalTrial_byState,-No_Democratic_State,-Percent_byState,-No_Republican_State,-Percent_byState_chr)%>%
rename(
Percent_byState_Demo2=Percent_byState_Demo,
<<<<<<< HEAD
Percent_byState_chr_Demo2=Percent_byState_chr_Demo) %>%
filter(state=="NC")
subdata2_nonews
=======
Percent_byState_chr_Demo2=Percent_byState_chr_Demo)%>%
mutate(News=="Without")
>>>>>>> 6911aae65c39ee3dbf760987e0938b170c9f36f4
subdata2_nonews <- melted_data2 %>%
mutate(StateFull = state.name[match(state, state.abb)])%>%
mutate(StateFull = ifelse(state == "DC", "District of Columbia", StateFull))%>%
group_by(Date, Type, state, StateFull) %>%
summarise(
Percent_byState = mean(value, na.rm = TRUE),
TotalTrial_byState = n(),
No_Republican_State = sum(value == 1, na.rm = TRUE),
No_Democratic_State = sum(value == 0, na.rm = TRUE),
.groups = 'drop'
)  %>%
mutate(Percent_byState_chr=sprintf("%1.2f%%", 100*Percent_byState))%>%
mutate(Percent_byState_Demo=round(1-Percent_byState, digits=3))%>%
mutate(Percent_byState_chr_Demo=sprintf("%1.2f%%", 100*Percent_byState_Demo))%>%
<<<<<<< HEAD
#select(-TotalTrial_byState,-No_Democratic_State,-Percent_byState,-No_Republican_State,-Percent_byState_chr)%>%
rename(
Percent_byState_Demo2=Percent_byState_Demo,
Percent_byState_chr_Demo2=Percent_byState_chr_Demo) %>%
filter(state=="NC")
subdata2_nonews
runApp()
subdata2_nonews
subdata2_nonews <- melted_data2 %>%
mutate(StateFull = state.name[match(state, state.abb)])%>%
mutate(StateFull = ifelse(state == "DC", "District of Columbia", StateFull))%>%
group_by(Date, Type, state, StateFull) %>%
summarise(
Percent_byState = mean(value, na.rm = TRUE),
TotalTrial_byState = n(),
No_Republican_State = sum(value == 1, na.rm = TRUE),
No_Democratic_State = sum(value == 0, na.rm = TRUE),
.groups = 'drop'
)  %>%
mutate(Percent_byState_chr=sprintf("%1.2f%%", 100*Percent_byState))%>%
mutate(Percent_byState_Demo=round(1-Percent_byState, digits=3))%>%
mutate(Percent_byState_chr_Demo=sprintf("%1.2f%%", 100*Percent_byState_Demo))%>%
#select(-TotalTrial_byState,-No_Democratic_State,-Percent_byState,-No_Republican_State,-Percent_byState_chr)%>%
rename(
Percent_byState_Demo2=Percent_byState_Demo,
Percent_byState_chr_Demo2=Percent_byState_chr_Demo) %>%
filter(state=="NC")
subdata2_nonews
View(subdata2_news)
subdata2_news <- subdata2 %>%
select(-TotalTrial_byState,-No_Democratic_State,-Percent_byState,-No_Republican_State,-Percent_byState_chr)
View(subdata2_news)
View(extended_data2)
subdata2_news
subdata2_news <- subdata2
View(subdata2_news)
=======
select(-TotalTrial_byState,-No_Democratic_State,-Percent_byState,-No_Republican_State,-Percent_byState_chr)%>%
rename(
Percent_byState_Demo2=Percent_byState_Demo,
Percent_byState_chr_Demo2=Percent_byState_chr_Demo)%>%
mutate(News="Without")
>>>>>>> 6911aae65c39ee3dbf760987e0938b170c9f36f4
subdata2_nonews
subdata2_news <- subdata2 %>%
select(-TotalTrial_byState,-No_Democratic_State,-Percent_byState,-No_Republican_State,-Percent_byState_chr) %>%
filter(state=="NC") %>%
filter(Date=="2024-09-17")
subdata2_news
subdata2_news <- subdata2 %>%
#select(-TotalTrial_byState,-No_Democratic_State,-Percent_byState,-No_Republican_State,-Percent_byState_chr) %>%
filter(state=="NC") %>%
filter(Date=="2024-09-17")
subdata2_news
subdata2_news <- subdata2 %>%
#select(-TotalTrial_byState,-No_Democratic_State,-Percent_byState,-No_Republican_State,-Percent_byState_chr) %>%
filter(state=="TX") %>%
filter(Date=="2024-09-17")
subdata2_news
subdata2_nonews <- melted_data2 %>%
mutate(StateFull = state.name[match(state, state.abb)])%>%
mutate(StateFull = ifelse(state == "DC", "District of Columbia", StateFull))%>%
group_by(Date, Type, state, StateFull) %>%
summarise(
Percent_byState = mean(value, na.rm = TRUE),
TotalTrial_byState = n(),
No_Republican_State = sum(value == 1, na.rm = TRUE),
No_Democratic_State = sum(value == 0, na.rm = TRUE),
.groups = 'drop'
)  %>%
mutate(Percent_byState_chr=sprintf("%1.2f%%", 100*Percent_byState))%>%
mutate(Percent_byState_Demo=round(1-Percent_byState, digits=3))%>%
mutate(Percent_byState_chr_Demo=sprintf("%1.2f%%", 100*Percent_byState_Demo))%>%
#select(-TotalTrial_byState,-No_Democratic_State,-Percent_byState,-No_Republican_State,-Percent_byState_chr)%>%
rename(
Percent_byState_Demo2=Percent_byState_Demo,
Percent_byState_chr_Demo2=Percent_byState_chr_Demo) %>%
filter(state=="TX")
subdata2_nonews
subdata2_news <- subdata2 %>%
select(-TotalTrial_byState,-No_Democratic_State,-Percent_byState,-No_Republican_State,-Percent_byState_chr)
subdata2_news
subdata2_nonews <- melted_data2 %>%
mutate(StateFull = state.name[match(state, state.abb)])%>%
mutate(StateFull = ifelse(state == "DC", "District of Columbia", StateFull))%>%
group_by(Date, Type, state, StateFull) %>%
summarise(
Percent_byState = mean(value, na.rm = TRUE),
TotalTrial_byState = n(),
No_Republican_State = sum(value == 1, na.rm = TRUE),
No_Democratic_State = sum(value == 0, na.rm = TRUE),
.groups = 'drop'
)  %>%
mutate(Percent_byState_chr=sprintf("%1.2f%%", 100*Percent_byState))%>%
mutate(Percent_byState_Demo=round(1-Percent_byState, digits=3))%>%
mutate(Percent_byState_chr_Demo=sprintf("%1.2f%%", 100*Percent_byState_Demo))%>%
select(-TotalTrial_byState,-No_Democratic_State,-Percent_byState,-No_Republican_State,-Percent_byState_chr)%>%
rename(
Percent_byState_Demo2=Percent_byState_Demo,
Percent_byState_chr_Demo2=Percent_byState_chr_Demo)%>%
mutate(Predicted_party2=ifelse(Percent_byState_Demo2>=0.5, "Democratic", "Republican"))
subdata2_nonews
#------for data2 no news  and news
subdata2_news <- subdata2 %>%
select(-TotalTrial_byState,-No_Democratic_State,-Percent_byState,-No_Republican_State,-Percent_byState_chr)%>%
mutate(Predicted_party=ifelse(Percent_byState_Demo>=0.5, "Democratic", "Republican"))
subdata2_nonews <- melted_data2 %>%
mutate(StateFull = state.name[match(state, state.abb)])%>%
mutate(StateFull = ifelse(state == "DC", "District of Columbia", StateFull))%>%
group_by(Date, Type, state, StateFull) %>%
summarise(
Percent_byState = mean(value, na.rm = TRUE),
TotalTrial_byState = n(),
No_Republican_State = sum(value == 1, na.rm = TRUE),
No_Democratic_State = sum(value == 0, na.rm = TRUE),
.groups = 'drop'
)  %>%
mutate(Percent_byState_chr=sprintf("%1.2f%%", 100*Percent_byState))%>%
mutate(Percent_byState_Demo=round(1-Percent_byState, digits=3))%>%
mutate(Percent_byState_chr_Demo=sprintf("%1.2f%%", 100*Percent_byState_Demo))%>%
select(-TotalTrial_byState,-No_Democratic_State,-Percent_byState,-No_Republican_State,-Percent_byState_chr)%>%
rename(
Percent_byState_Demo2=Percent_byState_Demo,
Percent_byState_chr_Demo2=Percent_byState_chr_Demo)%>%
mutate(Predicted_party2=ifelse(Percent_byState_Demo2>=0.5, "Democratic", "Republican"))
#this is the combined news and no news data for switch purpose
news_nonews<-subdata2_news%>%
left_join(subdata2_nonews, by=c("Date","Type","state","StateFull"))
news_nonews
runApp()
<<<<<<< HEAD
# ----------------------------
expert <-read_csv("expert_combined_panel.csv",show_col_types = FALSE)
expert <- expert %>%
distinct()
expert
expert_data
View(expert_data)
expert <-read_csv("expert_combined_panel.csv",show_col_types = FALSE)
expert <- expert %>%
distinct()
expert
View(expert)
expert <-read_csv("expert_combined_panel.csv",show_col_types = FALSE)
expert_drop_duplicates <- expert %>%
distinct()
expert_data<-expert_drop_duplicates%>%
rename(
Date = date,  # Renaming 'Result' to 'value'
)%>%
mutate(Date = as.Date(Date, format = "%m/%d/%y")) %>%
mutate(Harris = round(Harris/100,digit=2)) %>%
mutate(Trump = round(Trump/100,digit=2))
.groups = 'drop'
View(expert_data)
expert_drop_duplicates
expert_data<-expert_drop_duplicates%>%
rename(
Date = date,  # Renaming 'Result' to 'value'
)%>%
mutate(Date = as.Date(Date, format = "%m/%d/%y")) %>%
mutate(Harris = round(Harris/100,digit=2)) %>%
mutate(Trump = round(Trump/100,digit=2))
.groups = 'drop'
View(expert_data)
expert_data<-expert%>%
rename(
Date = date,  # Renaming 'Result' to 'value'
)%>%
mutate(Date = as.Date(Date, format = "%m/%d/%y")) %>%
mutate(Harris = round(Harris/100,digit=2)) %>%
mutate(Trump = round(Trump/100,digit=2))%>%
distinct()
.groups = 'drop'
View(expert_data)
runApp()
#***no news data
subdata3_1_nonews<-melted_data2 %>%
group_by(Type, Trial, Date,party) %>%
summarise(
Number_Repub_Win = n(),
votes_party =sum(Electoral_Votes),
.groups = 'drop'
)
melted_data2
subdata3_1_nonews<-melted_data2 %>%
mutate(party = ifelse(value ==1, "Republican", "Democratic"))
group_by(Type, Trial, Date,party) %>%
summarise(
Number_Repub_Win = n(),
votes_party =sum(Electoral_Votes),
.groups = 'drop'
)
melted_data2
subdata3_1_nonews<-melted_data2 %>%
mutate(party = ifelse(value ==1, "Republican", "Democratic"))%>%
group_by(Type, Trial, Date,party) %>%
summarise(
Number_Repub_Win = n(),
votes_party =sum(Electoral_Votes),
.groups = 'drop'
)
subdata3_1_nonews
subdata3_1_nonews<-melted_data2 %>%
mutate(party = ifelse(value ==1, "Republican", "Democratic"))%>%
group_by(Type, Trial, Date,party) %>%
summarise(
Number_Repub_Win = n(),
votes_party =sum(Electoral_Votes),
.groups = 'drop'
)
subdata3_1_for_sentiment_nonews<-melted_data2 %>%
mutate(party = ifelse(value ==1, "Republican", "Democratic"))%>%
group_by(Type, Trial, Date,party) %>%
summarise(
Number_Repub_Win = n(),
votes_party =sum(Electoral_Votes),
.groups = 'drop'
) %>% filter(party=="Democratic") %>%
mutate(percent_by_trail=votes_party/538)
subdata3_1_2_nonews<-melted_data2 %>%
mutate(party = ifelse(value ==1, "Republican", "Democratic"))%>%
group_by(Type, Date, party) %>%
summarise(
Number_Repub_Win = n(),
votes_party =sum(Electoral_Votes),
.groups = 'drop'
) %>%
arrange(Date)
#calculate total number of votes
subdata3_2_2_nonews<-melted_data2 %>%
mutate(party = ifelse(value ==1, "Republican", "Democratic"))%>%
group_by(Type, Date) %>%
summarise(
Votes =sum(Electoral_Votes),
.groups = 'drop'
)
subdata3_2_reshape_nonews<-subdata3_1_2_nonews%>%
left_join(subdata3_2_2,by=c("Type","Date")) %>%
mutate(Votes_perent=votes_party/Votes) %>%
select(Date, Type,party, Votes_perent) %>%  # Select relevant columns
pivot_wider(names_from = Type, values_from = Votes_perent, names_prefix = "Votes_")%>%
filter(party=="Democratic")%>%
arrange(Date)
.groups = 'drop'
# calculate total trials for each type each date for both parties, should be 100 per day for each type but we lose trials
trial_counts_nonews<-subdata3_1_nonews %>%
group_by(Type,Date) %>%
mutate(trial_counts= n_distinct(Trial))%>%
select(Type,Date,party,trial_counts)%>%
distinct() # drop duplicates
.groups = 'drop'
trial_votes_nonews<-melted_data2 %>%
group_by(Type, Date,party) %>%
summarise(
votes_party =sum(Electoral_Votes),
.groups = 'drop'
) %>%
left_join(trial_counts, by=c("party","Type","Date" ))%>%
mutate(average_votes=votes_party/trial_counts)
trial_votes_nonews<-melted_data2 %>%
mutate(party = ifelse(value ==1, "Republican", "Democratic"))%>%
group_by(Type, Date,party) %>%
summarise(
votes_party =sum(Electoral_Votes),
.groups = 'drop'
) %>%
left_join(trial_counts, by=c("party","Type","Date" ))%>%
mutate(average_votes=votes_party/trial_counts)
trial_votes_nonews
trial_votes_nonews<-melted_data2 %>%
mutate(party = ifelse(value ==1, "Republican", "Democratic"))%>%
group_by(Type, Date,party) %>%
summarise(
votes_party =sum(Electoral_Votes),
.groups = 'drop'
) %>%
left_join(trial_counts, by=c("party","Type","Date" ))%>%
mutate(average_votes=votes_party/trial_counts)
#total should be 535 for now and 538 later
total_votes_count_nonews <- trial_votes_nonews %>%
select(Date, Type, average_votes) %>%
group_by(Type, Date)%>%
summarise(
votes_total=sum(average_votes)
)
# merge two datasets before reshape
trial_votes_nonews <-trial_votes_nonews%>%
left_join(total_votes_count, by=c("Type","Date" )) %>%
mutate(average_votes = round(average_votes, digits = 0)) %>%  # Round average_votes
mutate(average_votes_percent=average_votes/votes_total)
#*************** Dataset no news with predicted votes
#For graph
average_votes_reshape2 <- trial_votes_nonews %>%
select(Date, Type, party, average_votes) %>%  # Select relevant columns
pivot_wider(names_from = Type, values_from = average_votes, names_prefix = "NoNews_Votes_")
# For graph
average_votes_percent_reshape2<- trial_votes_nonews %>%
select(Date, Type, party, average_votes_percent) %>%  # Select relevant columns
pivot_wider(names_from = Type, values_from = average_votes_percent, names_prefix = "NoNews_Votes_Percent_")
# Final Dataset for national level winner for average votes and average votes percent
#*******************************************************************
trial_votes_reshape2 <-average_votes_reshape2%>%
left_join(average_votes_percent_reshape, by=c("Date","party"))%>%
filter(party=="Democratic")%>%
arrange(Date)
#*******************************************************************
trial_votes_reshape2
trial_votes_reshape2 <-average_votes_reshape2%>%
left_join(average_votes_percent_reshape, by=c("Date","party"))%>%
#filter(party=="Democratic")%>%
arrange(Date)
#*******************************************************************
trial_votes_reshape2
trial_votes_reshape2 <-average_votes_reshape2%>%
left_join(average_votes_percent_reshape, by=c("Date","party"))%>%
filter(party=="Democratic")%>%
arrange(Date)
#*******************************************************************
runApp()
View(trial_votes_reshape2)
runApp()
runApp()
monte_carlo_reshape2
monte_carlo_overall2
monte_carlo_reshape2
View(monte_carlo_reshape2)
monte_carlo_reshape
View(monte_carlo_reshape)
runApp()
subdata3_1_nonews
melted_data2
subdata3_1_nonews<-melted_data2 %>%
mutate(party = ifelse(value ==1, "Republican", "Democratic"))%>%
group_by(Type, Trial, Date,party) %>%
summarise(
Number_Repub_Win = n(),
votes_party =sum(Electoral_Votes),
.groups = 'drop'
)
subdata3_1_nonews
subdata3_1_2_nonews
subdata3_2_reshape_nonews
runApp()
#***no news data
subdata3_1_nonews<-melted_data2 %>%
mutate(party = ifelse(value ==1, "Republican", "Democratic"))%>%
group_by(Type, Trial, Date,party) %>%
summarise(
Number_Repub_Win = n(),
votes_party =sum(Electoral_Votes),
.groups = 'drop'
)
subdata3_1_for_sentiment_nonews<-melted_data2 %>%
mutate(party = ifelse(value ==1, "Republican", "Democratic"))%>%
group_by(Type, Trial, Date,party) %>%
summarise(
Number_Repub_Win = n(),
votes_party =sum(Electoral_Votes),
.groups = 'drop'
) %>% filter(party=="Democratic") %>%
mutate(percent_by_trail=votes_party/538)
subdata3_1_2_nonews<-melted_data2 %>%
mutate(party = ifelse(value ==1, "Republican", "Democratic"))%>%
group_by(Type, Date, party) %>%
summarise(
Number_Repub_Win = n(),
votes_party =sum(Electoral_Votes),
.groups = 'drop'
) %>%
arrange(Date)
#calculate total number of votes
subdata3_2_2_nonews<-melted_data2 %>%
mutate(party = ifelse(value ==1, "Republican", "Democratic"))%>%
group_by(Type, Date) %>%
summarise(
Votes =sum(Electoral_Votes),
.groups = 'drop'
)
subdata3_2_reshape_nonews<-subdata3_1_2_nonews%>%
left_join(subdata3_2_2_nonews,by=c("Type","Date")) %>%
mutate(Votes_perent=votes_party/Votes) %>%
select(Date, Type,party, Votes_perent) %>%  # Select relevant columns
pivot_wider(names_from = Type, values_from = Votes_perent, names_prefix = "Votes_")%>%
filter(party=="Democratic")%>%
arrange(Date)
.groups = 'drop'
# calculate total trials for each type each date for both parties, should be 100 per day for each type but we lose trials
trial_counts_nonews<-subdata3_1_nonews %>%
group_by(Type,Date) %>%
mutate(trial_counts= n_distinct(Trial))%>%
select(Type,Date,party,trial_counts)%>%
distinct() # drop duplicates
.groups = 'drop'
trial_votes_nonews<-melted_data2 %>%
mutate(party = ifelse(value ==1, "Republican", "Democratic"))%>%
group_by(Type, Date,party) %>%
summarise(
votes_party =sum(Electoral_Votes),
.groups = 'drop'
) %>%
left_join(trial_counts, by=c("party","Type","Date" ))%>%
mutate(average_votes=votes_party/trial_counts)
#total should be 535 for now and 538 later
total_votes_count_nonews <- trial_votes_nonews %>%
select(Date, Type, average_votes) %>%
group_by(Type, Date)%>%
summarise(
votes_total=sum(average_votes)
)
# merge two datasets before reshape
trial_votes_nonews <-trial_votes_nonews%>%
left_join(total_votes_count_nonews, by=c("Type","Date" )) %>%
mutate(average_votes = round(average_votes, digits = 0)) %>%  # Round average_votes
mutate(average_votes_percent=average_votes/votes_total)
#*************** Dataset no news with predicted votes
#For graph
average_votes_reshape2 <- trial_votes_nonews %>%
select(Date, Type, party, average_votes) %>%  # Select relevant columns
pivot_wider(names_from = Type, values_from = average_votes, names_prefix = "NoNews_Votes_")
# For graph
average_votes_percent_reshape2<- trial_votes_nonews %>%
select(Date, Type, party, average_votes_percent) %>%  # Select relevant columns
pivot_wider(names_from = Type, values_from = average_votes_percent, names_prefix = "NoNews_Votes_Percent_")
# Final Dataset for national level winner for average votes and average votes percent
#*******************************************************************
trial_votes_reshape2 <-average_votes_reshape2%>%
left_join(average_votes_percent_reshape2, by=c("Date","party"))%>%
filter(party=="Democratic")%>%
arrange(Date)
#*******************************************************************
trial_votes_reshape2
trial_counts_nonews
=======
shiny::runApp()
runApp()
runApp()
pull_and_save_to_shiny <- function() {
# Navigate to your local GitHub repository
setwd("/Users/sunmingrun/Documents/GitHub/ElectionGPT")
# Pull the latest changes from GitHub
system("git merge")
system("git pull origin main")
message("Pulled latest changes from GitHub.")
}
pull_and_save_to_shiny()
save_to_shiny <- function() {
# Path to the updated file after pulling from GitHub
source_file_panel <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/data/panel_election_results_state.csv"
# Destination path where the file will be copied to (Shiny folder)
destination_file_panel <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/ShinyApp/panel_election_results_state.csv"
# Check if the file exists, then copy it to the Shiny folder
if (file.exists(source_file_panel)) {
file.copy(from = source_file_panel, to = destination_file_panel, overwrite = TRUE)
message("panel_election_results_state.csv file copied to ShinyApp folder.")
} else {
message("panel_election_results_state.csv does not exist. Please check the file path.")
}
# Path to the expert_combined_panel.csv file after pulling from GitHub
source_file_expert <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/data/expert/expert_combined_panel.csv"
# Destination path for the expert_combined_panel.csv (same folder)
destination_file_expert <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/ShinyApp/expert_combined_panel.csv"
# Check if the file exists, then copy it to the Shiny folder
if (file.exists(source_file_expert)) {
file.copy(from = source_file_expert, to = destination_file_expert, overwrite = TRUE)
message("expert_combined_panel.csv file copied to ShinyApp folder.")
} else {
message("expert_combined_panel.csv does not exist. Please check the file path.")
}
source_file_panel <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/data/panel_control_election_results_state.csv"
# Destination path where the file will be copied to (Shiny folder)
destination_file_panel <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/ShinyApp/panel_control_election_results_state.csv"
# Check if the file exists, then copy it to the Shiny folder
if (file.exists(source_file_panel)) {
file.copy(from = source_file_panel, to = destination_file_panel, overwrite = TRUE)
message("panel_election_results_state.csv file copied to ShinyApp folder.")
} else {
message("panel_election_results_state.csv does not exist. Please check the file path.")
}
}
save_to_shiny()
#Step 2: Use Git to add, commit, and push changes to GitHub
push_to_github <- function() {
# Navigate to your local GitHub repository
setwd("/Users/sunmingrun/Documents/GitHub/ElectionGPT/ShinyApp")
# Add the updated files to the staging area
system("git add .")  # Add all changed files, or you can specify the specific file: system('git add path_to_file')
# Commit the changes with a message
system("git commit -m 'Automated update of Shiny'")
# Push the changes to GitHub
system("git push origin main")
message("Changes pushed to GitHub successfully.")
}
# Run the entire process
push_to_github()
pull_and_save_to_shiny <- function() {
# Navigate to your local GitHub repository
setwd("/Users/sunmingrun/Documents/GitHub/ElectionGPT")
# Pull the latest changes from GitHub
system("git pull origin main")
message("Pulled latest changes from GitHub.")
}
pull_and_save_to_shiny()
save_to_shiny <- function() {
# Path to the updated file after pulling from GitHub
source_file_panel <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/data/panel_election_results_state.csv"
# Destination path where the file will be copied to (Shiny folder)
destination_file_panel <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/ShinyApp/panel_election_results_state.csv"
# Check if the file exists, then copy it to the Shiny folder
if (file.exists(source_file_panel)) {
file.copy(from = source_file_panel, to = destination_file_panel, overwrite = TRUE)
message("panel_election_results_state.csv file copied to ShinyApp folder.")
} else {
message("panel_election_results_state.csv does not exist. Please check the file path.")
}
# Path to the expert_combined_panel.csv file after pulling from GitHub
source_file_expert <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/data/expert/expert_combined_panel.csv"
# Destination path for the expert_combined_panel.csv (same folder)
destination_file_expert <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/ShinyApp/expert_combined_panel.csv"
# Check if the file exists, then copy it to the Shiny folder
if (file.exists(source_file_expert)) {
file.copy(from = source_file_expert, to = destination_file_expert, overwrite = TRUE)
message("expert_combined_panel.csv file copied to ShinyApp folder.")
} else {
message("expert_combined_panel.csv does not exist. Please check the file path.")
}
source_file_panel <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/data/panel_control_election_results_state.csv"
# Destination path where the file will be copied to (Shiny folder)
destination_file_panel <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/ShinyApp/panel_control_election_results_state.csv"
# Check if the file exists, then copy it to the Shiny folder
if (file.exists(source_file_panel)) {
file.copy(from = source_file_panel, to = destination_file_panel, overwrite = TRUE)
message("panel_election_results_state.csv file copied to ShinyApp folder.")
} else {
message("panel_election_results_state.csv does not exist. Please check the file path.")
}
}
save_to_shiny()
#Step 2: Use Git to add, commit, and push changes to GitHub
push_to_github <- function() {
# Navigate to your local GitHub repository
setwd("/Users/sunmingrun/Documents/GitHub/ElectionGPT/ShinyApp")
# Add the updated files to the staging area
system("git add .")  # Add all changed files, or you can specify the specific file: system('git add path_to_file')
# Commit the changes with a message
system("git commit -m 'Automated update of Shiny'")
# Push the changes to GitHub
system("git push origin main")
message("Changes pushed to GitHub successfully.")
}
# Run the entire process
push_to_github()
pull_and_save_to_shiny <- function() {
# Navigate to your local GitHub repository
setwd("/Users/sunmingrun/Documents/GitHub/ElectionGPT")
# Pull the latest changes from GitHub
system("git merge")
system("git pull")
system("git pull origin main")
message("Pulled latest changes from GitHub.")
}
pull_and_save_to_shiny()
save_to_shiny <- function() {
# Path to the updated file after pulling from GitHub
source_file_panel <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/data/panel_election_results_state.csv"
# Destination path where the file will be copied to (Shiny folder)
destination_file_panel <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/ShinyApp/panel_election_results_state.csv"
# Check if the file exists, then copy it to the Shiny folder
if (file.exists(source_file_panel)) {
file.copy(from = source_file_panel, to = destination_file_panel, overwrite = TRUE)
message("panel_election_results_state.csv file copied to ShinyApp folder.")
} else {
message("panel_election_results_state.csv does not exist. Please check the file path.")
}
# Path to the expert_combined_panel.csv file after pulling from GitHub
source_file_expert <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/data/expert/expert_combined_panel.csv"
# Destination path for the expert_combined_panel.csv (same folder)
destination_file_expert <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/ShinyApp/expert_combined_panel.csv"
# Check if the file exists, then copy it to the Shiny folder
if (file.exists(source_file_expert)) {
file.copy(from = source_file_expert, to = destination_file_expert, overwrite = TRUE)
message("expert_combined_panel.csv file copied to ShinyApp folder.")
} else {
message("expert_combined_panel.csv does not exist. Please check the file path.")
}
source_file_panel <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/data/panel_control_election_results_state.csv"
# Destination path where the file will be copied to (Shiny folder)
destination_file_panel <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/ShinyApp/panel_control_election_results_state.csv"
# Check if the file exists, then copy it to the Shiny folder
if (file.exists(source_file_panel)) {
file.copy(from = source_file_panel, to = destination_file_panel, overwrite = TRUE)
message("panel_election_results_state.csv file copied to ShinyApp folder.")
} else {
message("panel_election_results_state.csv does not exist. Please check the file path.")
}
}
save_to_shiny()
#Step 2: Use Git to add, commit, and push changes to GitHub
push_to_github <- function() {
# Navigate to your local GitHub repository
setwd("/Users/sunmingrun/Documents/GitHub/ElectionGPT/ShinyApp")
# Add the updated files to the staging area
system("git add .")  # Add all changed files, or you can specify the specific file: system('git add path_to_file')
# Commit the changes with a message
system("git commit -m 'Automated update of Shiny'")
# Push the changes to GitHub
system("git push origin main")
message("Changes pushed to GitHub successfully.")
}
# Run the entire process
push_to_github()
pull_and_save_to_shiny()
system("git merge")
system("git pull")
system("git pull origin main")
pull_and_save_to_shiny <- function() {
# Navigate to your local GitHub repository
setwd("/Users/sunmingrun/Documents/GitHub/ElectionGPT")
# Pull the latest changes from GitHub
system("git pull")
system("git merge")
system("git add .")
system("git pull origin main")
message("Pulled latest changes from GitHub.")
}
pull_and_save_to_shiny()
# Pull the latest changes from GitHub
system("git commit -m"update of Shiny")
# Pull the latest changes from GitHub
system("git commit -m 'update of Shiny'")
pull_and_save_to_shiny <- function() {
# Navigate to your local GitHub repository
setwd("/Users/sunmingrun/Documents/GitHub/ElectionGPT")
# Pull the latest changes from GitHub
system("git commit -m 'update of Shiny'")
system("git pull")
system("git merge")
system("git add .")
system("git pull origin main")
message("Pulled latest changes from GitHub.")
}
pull_and_save_to_shiny()
save_to_shiny()
# Run the entire process
push_to_github()
runApp()
>>>>>>> 6911aae65c39ee3dbf760987e0938b170c9f36f4
runApp()
