library(tidyr)
library(tidytuesdayR) # to get tidytuesday data
library(tidyverse) # for ggplot
library(janitor) # for clean_names
library(ggeasy) # making ggplot customisation easy
library(gganimate) # for animating map by year
library(transformr) # i think i need this for gganimate
library(patchwork) # to patch plots together
library(PNWColors)
library(tidyquant)
library(plotly)
library(DT)
library(ggrepel)
library(tidyr)
library(shinycssloaders)
library(shinythemes)
library(shinyBS)
library(scales)
library(shinyWidgets)
library(bslib)
#library(rjson)
library(shinydashboard)
library(shinycssloaders)
library(shinyjs)
library(shinyWidgets)
library(ggridges)
library(lubridate)
library(plotly)
library(qicharts2)
library(rintrojs)
library(AMR)
library(data.table)
library(DT)
library(ggridges)
library(lubridate)
library(survival)
library(ggpubr)
library(survminer)
library(viridis)
library(zoo)
library(rsconnect)
# download automate process
library(httr)
setwd("/Users/sunmingrun/Documents/GitHub/ElectionGPT/ShinyApp")
# 1 data import
data<-read_csv("panel_election_results_state.csv",show_col_types = FALSE)
# 2 change the variable name and assigned the predicted party based on the result
melted_data<-data%>%
rename(
value = Result,  # Renaming 'Result' to 'value'
state = State,
Type= Voice# Renaming 'State' to 'state'
)%>%
mutate(party = ifelse(value ==1, "Republican", "Democratic")) %>%
mutate(Type = ifelse(Type == "direct", "Direct", Type)) %>%
mutate(Date = as.Date(Date, format = "%m/%d/%y")) %>%
mutate(Type = ifelse(Type == "Direct", "Anonymous", Type))
#---------
data2<-read_csv("panel_control_election_results_state.csv",show_col_types = FALSE)
melted_data2<-data2%>%
rename(
value = Result,  # Renaming 'Result' to 'value'
state = State,
Type= Voice# Renaming 'State' to 'state'
)%>%
mutate(Type = ifelse(Type == "direct", "Direct", Type)) %>%
mutate(Date = as.Date(Date, format = "%m/%d/%y")) %>%
mutate(Type = ifelse(Type == "Direct", "Anonymous", Type))
#````````````````
# 3.1 2024-8-19 data has duplicates when retry to append the data
data_0819_msnbc <- melted_data %>%
filter(Type == "MSNBC", Date == "2024-08-19") %>%
distinct()  # This removes duplicates within the MSNBC data for August 19th
# 3.2 Filter for all data that is NOT MSNBC on August 19, 2024
data_other <- melted_data %>%
filter(!(Type == "MSNBC" & Date == "2024-08-19"))
# 3.3 Combine the cleaned MSNBC data for August 19 with the rest of the data
melted_data <- bind_rows(data_other, data_0819_msnbc) %>%
distinct(Trial, Type, Date, state, .keep_all = TRUE)
# 4 Assign the electoral_votes to each state in each trial
electoral_votes <- data.frame(
state = c("AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA",
"HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD",
"MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ",
"NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC",
"SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY", "DC"),
Electoral_Votes = c(9, 3, 11, 6, 54, 10, 7, 3, 30, 16,
4, 4, 19, 11, 6, 6, 8, 8, 4, 10,
11, 15, 10, 6, 10, 4, 5, 6, 4, 14,
5, 28, 16, 3, 17, 7, 8, 19, 4, 9,
3, 11, 40, 6, 3, 13, 12, 4, 10, 3, 3))
# 5 merage data
melted_data<-melted_data%>%
left_join(electoral_votes, by ="state")
melted_data2<-melted_data2%>%
left_join(electoral_votes, by ="state")
# For calculation
#
subdata1 <- melted_data %>%
mutate(StateFull = state.name[match(state, state.abb)]) %>%
group_by(Type, Date) %>%
summarise(
TotalTrial = n(),
No_Republican = sum(value == 1, na.rm = TRUE),
No_Democratic = sum(value == 0, na.rm = TRUE),
.groups = 'drop'
) %>%
mutate(
Republican = No_Republican / TotalTrial,
Democratic = No_Democratic / TotalTrial
)
# Comments: sub1 data generates variable based on four types of avg group by Type and Date but does not take electoral votes into account
sub1 <- subdata1 %>%
select(Date, Type, Democratic) %>%  # Select relevant columns
pivot_wider(names_from = Type, values_from = Democratic, names_prefix = "avg_")%>%
arrange(Date)
# Comments: sub2 includes total observations for each type per day but does not take electoral votes into account
sub2 <-subdata1 %>%
select(Date, Type, No_Democratic) %>%  # Select relevant columns
pivot_wider(names_from = Type, values_from = No_Democratic, names_prefix = "Count_")%>%
arrange(Date)
# Comment: subdata2 creates the probability of aggregated state winner by Date and Type
# Creating the second subset with state-specific totals and proportions
# ******************Percent_byState variable used for state-level time series
subdata2 <- melted_data %>%
mutate(StateFull = state.name[match(state, state.abb)])%>%
mutate(StateFull = ifelse(state == "DC", "District of Columbia", StateFull))%>%
group_by(Date, Type, state, StateFull) %>%
summarise(
Percent_byState = mean(value, na.rm = TRUE),
TotalTrial_byState = n(),
No_Republican_State = sum(value == 1, na.rm = TRUE),
No_Democratic_State = sum(value == 0, na.rm = TRUE),
.groups = 'drop'
)  %>%
mutate(Percent_byState_chr=sprintf("%1.2f%%", 100*Percent_byState))%>%
mutate(Percent_byState_Demo=round(1-Percent_byState, digits=3))%>%
mutate(Percent_byState_chr_Demo=sprintf("%1.2f%%", 100*Percent_byState_Demo))
#------for data2 no news  and news
subdata2_news <- subdata2 %>%
select(-TotalTrial_byState,-No_Democratic_State,-Percent_byState,-No_Republican_State,-Percent_byState_chr)
subdata2_nonews <- melted_data2 %>%
mutate(StateFull = state.name[match(state, state.abb)])%>%
mutate(StateFull = ifelse(state == "DC", "District of Columbia", StateFull))%>%
group_by(Date, Type, state, StateFull) %>%
summarise(
Percent_byState = mean(value, na.rm = TRUE),
TotalTrial_byState = n(),
No_Republican_State = sum(value == 1, na.rm = TRUE),
No_Democratic_State = sum(value == 0, na.rm = TRUE),
.groups = 'drop'
)  %>%
mutate(Percent_byState_chr=sprintf("%1.2f%%", 100*Percent_byState))%>%
mutate(Percent_byState_Demo=round(1-Percent_byState, digits=3))%>%
mutate(Percent_byState_chr_Demo=sprintf("%1.2f%%", 100*Percent_byState_Demo))%>%
select(-TotalTrial_byState,-No_Democratic_State,-Percent_byState,-No_Republican_State,-Percent_byState_chr)%>%
rename(
Percent_byState_Demo2=Percent_byState_Demo,
Percent_byState_chr_Demo2=Percent_byState_chr_Demo)
#this is the combined news and no news data for switch purpose
news_nonews<-subdata2_news%>%
left_join(subdata2_nonews, by=c("Date","Type","state","StateFull"))%>%
mutate(Date2=Date)
#-----------------Combine news and no news
news_nonews
reshaped_data <- news_nonews %>%
# Reshape the columns with and without "2" in variable name
pivot_longer(cols = starts_with("Percent_byState_Demo"),
names_to = "Variable",
values_to = "Percent_byState_Demo_Value") %>%
pivot_longer(cols = starts_with("Percent_byState_chr_Demo"),
names_to = "Variable_chr",
values_to = "Percent_byState_chr_Demo_Value") %>%
# Add "News" column based on variable names
mutate(News = ifelse(grepl("2", Variable), "No News", "With News")) %>%
# Drop the "2" in the variable names for clarity
select(-Variable, -Variable_chr) %>%
# Remove rows where Percent_byState_Demo_Value is NA
filter(!is.na(Percent_byState_Demo_Value))
reshaped_data
news_nonews<-subdata2_news%>%
left_join(subdata2_nonews, by=c("Date","Type","state","StateFull"))
#%>%mutate(Date2=Date)
reshaped_data <- news_nonews %>%
# Reshape the columns with and without "2" in variable name
pivot_longer(cols = starts_with("Percent_byState_Demo"),
names_to = "Variable",
values_to = "Percent_byState_Demo_Value") %>%
pivot_longer(cols = starts_with("Percent_byState_chr_Demo"),
names_to = "Variable_chr",
values_to = "Percent_byState_chr_Demo_Value") %>%
# Add "News" column based on variable names
mutate(News = ifelse(grepl("2", Variable), "No News", "With News")) %>%
# Drop the "2" in the variable names for clarity
select(-Variable, -Variable_chr) %>%
# Remove rows where Percent_byState_Demo_Value is NA
filter(!is.na(Percent_byState_Demo_Value))
reshaped_data
# Reshape the data with proper 'News' categorization
reshaped_data <- data %>%
pivot_longer(
cols = c(Percent_byState_Demo, Percent_byState_Demo2),
names_to = "Variable",
values_to = "Percent_byState_Demo_Value"
) %>%
pivot_longer(
cols = c(Percent_byState_chr_Demo, Percent_byState_chr_Demo2),
names_to = "Variable_chr",
values_to = "Percent_byState_chr_Demo_Value"
) %>%
# Create the 'News' column based on the presence of '2' in the original column name
mutate(News = ifelse(grepl("2", Variable), "No News", "With News")) %>%
# Drop the columns used for reshaping
select(-Variable, -Variable_chr) %>%
# Remove rows where Percent_byState_Demo_Value is NA
filter(!is.na(Percent_byState_Demo_Value))
# Reshape the data with proper 'News' categorization
reshaped_data <- news_nonews %>%
pivot_longer(
cols = c(Percent_byState_Demo, Percent_byState_Demo2),
names_to = "Variable",
values_to = "Percent_byState_Demo_Value"
) %>%
pivot_longer(
cols = c(Percent_byState_chr_Demo, Percent_byState_chr_Demo2),
names_to = "Variable_chr",
values_to = "Percent_byState_chr_Demo_Value"
) %>%
# Create the 'News' column based on the presence of '2' in the original column name
mutate(News = ifelse(grepl("2", Variable), "No News", "With News")) %>%
# Drop the columns used for reshaping
select(-Variable, -Variable_chr) %>%
# Remove rows where Percent_byState_Demo_Value is NA
filter(!is.na(Percent_byState_Demo_Value))
# View the reshaped data
reshaped_data
subdata2_nonews <- melted_data2 %>%
mutate(StateFull = state.name[match(state, state.abb)])%>%
mutate(StateFull = ifelse(state == "DC", "District of Columbia", StateFull))%>%
group_by(Date, Type, state, StateFull) %>%
summarise(
Percent_byState = mean(value, na.rm = TRUE),
TotalTrial_byState = n(),
No_Republican_State = sum(value == 1, na.rm = TRUE),
No_Democratic_State = sum(value == 0, na.rm = TRUE),
.groups = 'drop'
)  %>%
mutate(Percent_byState_chr=sprintf("%1.2f%%", 100*Percent_byState))%>%
mutate(Percent_byState_Demo=round(1-Percent_byState, digits=3))%>%
mutate(Percent_byState_chr_Demo=sprintf("%1.2f%%", 100*Percent_byState_Demo))%>%
select(-TotalTrial_byState,-No_Democratic_State,-Percent_byState,-No_Republican_State,-Percent_byState_chr)%>%
rename(
Percent_byState_Demo2=Percent_byState_Demo,
Percent_byState_chr_Demo2=Percent_byState_chr_Demo)
subdata2_nonews
subdata2_nonews <- melted_data2 %>%
mutate(StateFull = state.name[match(state, state.abb)])%>%
mutate(StateFull = ifelse(state == "DC", "District of Columbia", StateFull))%>%
group_by(Date, Type, state, StateFull) %>%
summarise(
Percent_byState = mean(value, na.rm = TRUE),
TotalTrial_byState = n(),
No_Republican_State = sum(value == 1, na.rm = TRUE),
No_Democratic_State = sum(value == 0, na.rm = TRUE),
.groups = 'drop'
)  %>%
mutate(Percent_byState_chr=sprintf("%1.2f%%", 100*Percent_byState))%>%
mutate(Percent_byState_Demo=round(1-Percent_byState, digits=3))%>%
mutate(Percent_byState_chr_Demo=sprintf("%1.2f%%", 100*Percent_byState_Demo))%>%
select(-TotalTrial_byState,-No_Democratic_State,-Percent_byState,-No_Republican_State,-Percent_byState_chr)%>%
rename(
Percent_byState_Demo2=Percent_byState_Demo,
Percent_byState_chr_Demo2=Percent_byState_chr_Demo)%>%
mutate(News=="Without")
subdata2_nonews <- melted_data2 %>%
mutate(StateFull = state.name[match(state, state.abb)])%>%
mutate(StateFull = ifelse(state == "DC", "District of Columbia", StateFull))%>%
group_by(Date, Type, state, StateFull) %>%
summarise(
Percent_byState = mean(value, na.rm = TRUE),
TotalTrial_byState = n(),
No_Republican_State = sum(value == 1, na.rm = TRUE),
No_Democratic_State = sum(value == 0, na.rm = TRUE),
.groups = 'drop'
)  %>%
mutate(Percent_byState_chr=sprintf("%1.2f%%", 100*Percent_byState))%>%
mutate(Percent_byState_Demo=round(1-Percent_byState, digits=3))%>%
mutate(Percent_byState_chr_Demo=sprintf("%1.2f%%", 100*Percent_byState_Demo))%>%
select(-TotalTrial_byState,-No_Democratic_State,-Percent_byState,-No_Republican_State,-Percent_byState_chr)%>%
rename(
Percent_byState_Demo2=Percent_byState_Demo,
Percent_byState_chr_Demo2=Percent_byState_chr_Demo)%>%
mutate(News="Without")
subdata2_nonews
subdata2_news <- subdata2 %>%
select(-TotalTrial_byState,-No_Democratic_State,-Percent_byState,-No_Republican_State,-Percent_byState_chr)%>%
mutate(News="With")
subdata2_news
subdata2_nonews <- melted_data2 %>%
mutate(StateFull = state.name[match(state, state.abb)])%>%
mutate(StateFull = ifelse(state == "DC", "District of Columbia", StateFull))%>%
group_by(Date, Type, state, StateFull) %>%
summarise(
Percent_byState = mean(value, na.rm = TRUE),
TotalTrial_byState = n(),
No_Republican_State = sum(value == 1, na.rm = TRUE),
No_Democratic_State = sum(value == 0, na.rm = TRUE),
.groups = 'drop'
)  %>%
mutate(Percent_byState_chr=sprintf("%1.2f%%", 100*Percent_byState))%>%
mutate(Percent_byState_Demo=round(1-Percent_byState, digits=3))%>%
mutate(Percent_byState_chr_Demo=sprintf("%1.2f%%", 100*Percent_byState_Demo))%>%
select(-TotalTrial_byState,-No_Democratic_State,-Percent_byState,-No_Republican_State,-Percent_byState_chr)%>%
rename(
Percent_byState_Demo=Percent_byState_Demo,
Percent_byState_chr_Demo=Percent_byState_chr_Demo)%>%
mutate(News="Without")
subdata2_nonews
combined_data <- full_join(subdata2_news, subdata2_nonews,
by = c("Date", "Type", "state", "StateFull",
"Percent_byState_Demo", "Percent_byState_chr_Demo", "News"))
combined_data
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
news_nonews<-subdata2_news%>%
left_join(subdata2_nonews, by=c("Date","Type","state","StateFull")) %>%
#-----------------
news_nonews
library(usmap) #import the package
library(shiny)
library(ggplot2) #use ggplot2 to add layer for visualization
library(maps)
library(openxlsx)
library(readxl)
library(dplyr)
library(tidyr)
library(tidytuesdayR) # to get tidytuesday data
library(tidyverse) # for ggplot
library(janitor) # for clean_names
library(ggeasy) # making ggplot customisation easy
library(gganimate) # for animating map by year
library(transformr) # i think i need this for gganimate
library(patchwork) # to patch plots together
library(PNWColors)
library(tidyquant)
library(plotly)
library(DT)
library(ggrepel)
library(tidyr)
library(shinycssloaders)
library(shinythemes)
library(shinyBS)
library(scales)
library(shinyWidgets)
library(bslib)
#library(rjson)
library(shinydashboard)
library(shinycssloaders)
library(shinyjs)
library(shinyWidgets)
library(ggridges)
library(lubridate)
library(plotly)
library(qicharts2)
library(rintrojs)
library(AMR)
library(data.table)
library(DT)
library(ggridges)
library(lubridate)
library(survival)
library(ggpubr)
library(survminer)
library(viridis)
library(zoo)
library(rsconnect)
# download automate process
library(httr)
setwd("/Users/sunmingrun/Documents/GitHub/ElectionGPT/ShinyApp")
# 1 data import
data<-read_csv("panel_election_results_state.csv",show_col_types = FALSE)
# 2 change the variable name and assigned the predicted party based on the result
melted_data<-data%>%
rename(
value = Result,  # Renaming 'Result' to 'value'
state = State,
Type= Voice# Renaming 'State' to 'state'
)%>%
mutate(party = ifelse(value ==1, "Republican", "Democratic")) %>%
mutate(Type = ifelse(Type == "direct", "Direct", Type)) %>%
mutate(Date = as.Date(Date, format = "%m/%d/%y")) %>%
mutate(Type = ifelse(Type == "Direct", "Anonymous", Type))
#---------
data2<-read_csv("panel_control_election_results_state.csv",show_col_types = FALSE)
melted_data2<-data2%>%
rename(
value = Result,  # Renaming 'Result' to 'value'
state = State,
Type= Voice# Renaming 'State' to 'state'
)%>%
mutate(Type = ifelse(Type == "direct", "Direct", Type)) %>%
mutate(Date = as.Date(Date, format = "%m/%d/%y")) %>%
mutate(Type = ifelse(Type == "Direct", "Anonymous", Type))
#````````````````
# 3.1 2024-8-19 data has duplicates when retry to append the data
data_0819_msnbc <- melted_data %>%
filter(Type == "MSNBC", Date == "2024-08-19") %>%
distinct()  # This removes duplicates within the MSNBC data for August 19th
# 3.2 Filter for all data that is NOT MSNBC on August 19, 2024
data_other <- melted_data %>%
filter(!(Type == "MSNBC" & Date == "2024-08-19"))
# 3.3 Combine the cleaned MSNBC data for August 19 with the rest of the data
melted_data <- bind_rows(data_other, data_0819_msnbc) %>%
distinct(Trial, Type, Date, state, .keep_all = TRUE)
# 4 Assign the electoral_votes to each state in each trial
electoral_votes <- data.frame(
state = c("AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA",
"HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD",
"MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ",
"NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC",
"SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY", "DC"),
Electoral_Votes = c(9, 3, 11, 6, 54, 10, 7, 3, 30, 16,
4, 4, 19, 11, 6, 6, 8, 8, 4, 10,
11, 15, 10, 6, 10, 4, 5, 6, 4, 14,
5, 28, 16, 3, 17, 7, 8, 19, 4, 9,
3, 11, 40, 6, 3, 13, 12, 4, 10, 3, 3))
# 5 merage data
melted_data<-melted_data%>%
left_join(electoral_votes, by ="state")
melted_data2<-melted_data2%>%
left_join(electoral_votes, by ="state")
# For calculation
#
subdata1 <- melted_data %>%
mutate(StateFull = state.name[match(state, state.abb)]) %>%
group_by(Type, Date) %>%
summarise(
TotalTrial = n(),
No_Republican = sum(value == 1, na.rm = TRUE),
No_Democratic = sum(value == 0, na.rm = TRUE),
.groups = 'drop'
) %>%
mutate(
Republican = No_Republican / TotalTrial,
Democratic = No_Democratic / TotalTrial
)
# Comments: sub1 data generates variable based on four types of avg group by Type and Date but does not take electoral votes into account
sub1 <- subdata1 %>%
select(Date, Type, Democratic) %>%  # Select relevant columns
pivot_wider(names_from = Type, values_from = Democratic, names_prefix = "avg_")%>%
arrange(Date)
# Comments: sub2 includes total observations for each type per day but does not take electoral votes into account
sub2 <-subdata1 %>%
select(Date, Type, No_Democratic) %>%  # Select relevant columns
pivot_wider(names_from = Type, values_from = No_Democratic, names_prefix = "Count_")%>%
arrange(Date)
# Comment: subdata2 creates the probability of aggregated state winner by Date and Type
# Creating the second subset with state-specific totals and proportions
# ******************Percent_byState variable used for state-level time series
subdata2 <- melted_data %>%
mutate(StateFull = state.name[match(state, state.abb)])%>%
mutate(StateFull = ifelse(state == "DC", "District of Columbia", StateFull))%>%
group_by(Date, Type, state, StateFull) %>%
summarise(
Percent_byState = mean(value, na.rm = TRUE),
TotalTrial_byState = n(),
No_Republican_State = sum(value == 1, na.rm = TRUE),
No_Democratic_State = sum(value == 0, na.rm = TRUE),
.groups = 'drop'
)  %>%
mutate(Percent_byState_chr=sprintf("%1.2f%%", 100*Percent_byState))%>%
mutate(Percent_byState_Demo=round(1-Percent_byState, digits=3))%>%
mutate(Percent_byState_chr_Demo=sprintf("%1.2f%%", 100*Percent_byState_Demo))
#------for data2 no news  and news
subdata2_news <- subdata2 %>%
select(-TotalTrial_byState,-No_Democratic_State,-Percent_byState,-No_Republican_State,-Percent_byState_chr)
subdata2_nonews <- melted_data2 %>%
mutate(StateFull = state.name[match(state, state.abb)])%>%
mutate(StateFull = ifelse(state == "DC", "District of Columbia", StateFull))%>%
group_by(Date, Type, state, StateFull) %>%
summarise(
Percent_byState = mean(value, na.rm = TRUE),
TotalTrial_byState = n(),
No_Republican_State = sum(value == 1, na.rm = TRUE),
No_Democratic_State = sum(value == 0, na.rm = TRUE),
.groups = 'drop'
)  %>%
mutate(Percent_byState_chr=sprintf("%1.2f%%", 100*Percent_byState))%>%
mutate(Percent_byState_Demo=round(1-Percent_byState, digits=3))%>%
mutate(Percent_byState_chr_Demo=sprintf("%1.2f%%", 100*Percent_byState_Demo))%>%
select(-TotalTrial_byState,-No_Democratic_State,-Percent_byState,-No_Republican_State,-Percent_byState_chr)%>%
rename(
Percent_byState_Demo2=Percent_byState_Demo,
Percent_byState_chr_Demo2=Percent_byState_chr_Demo)
#this is the combined news and no news data for switch purpose
news_nonews<-subdata2_news%>%
left_join(subdata2_nonews, by=c("Date","Type","state","StateFull")) %>%
#-----------------Combine news and no news
news_nonews
#this is the combined news and no news data for switch purpose
news_nonews<-subdata2_news%>%
left_join(subdata2_nonews, by=c("Date","Type","state","StateFull")) %>%
news_nonews<-subdata2_news%>%
left_join(subdata2_nonews, by=c("Date","Type","state","StateFull"))
news_nonews<-subdata2_news%>%
left_join(subdata2_nonews, by=c("Date","Type","state","StateFull"))
news_nonews
runApp()
