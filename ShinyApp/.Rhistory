pull_and_save_to_shiny()
save_to_shiny <- function() {
# Path to the updated file after pulling from GitHub
source_file_panel <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/data/panel_election_results_state.csv"
# Destination path where the file will be copied to (Shiny folder)
destination_file_panel <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/ShinyApp/panel_election_results_state.csv"
# Check if the file exists, then copy it to the Shiny folder
if (file.exists(source_file_panel)) {
file.copy(from = source_file_panel, to = destination_file_panel, overwrite = TRUE)
message("panel_election_results_state.csv file copied to ShinyApp folder.")
} else {
message("panel_election_results_state.csv does not exist. Please check the file path.")
}
# Path to the expert_combined_panel.csv file after pulling from GitHub
source_file_expert <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/data/expert/expert_combined_panel.csv"
# Destination path for the expert_combined_panel.csv (same folder)
destination_file_expert <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/ShinyApp/expert_combined_panel.csv"
# Check if the file exists, then copy it to the Shiny folder
if (file.exists(source_file_expert)) {
file.copy(from = source_file_expert, to = destination_file_expert, overwrite = TRUE)
message("expert_combined_panel.csv file copied to ShinyApp folder.")
} else {
message("expert_combined_panel.csv does not exist. Please check the file path.")
}
source_file_panel <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/data/panel_control_election_results_state.csv"
# Destination path where the file will be copied to (Shiny folder)
destination_file_panel <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/ShinyApp/panel_control_election_results_state.csv"
# Check if the file exists, then copy it to the Shiny folder
if (file.exists(source_file_panel)) {
file.copy(from = source_file_panel, to = destination_file_panel, overwrite = TRUE)
message("panel_election_results_state.csv file copied to ShinyApp folder.")
} else {
message("panel_election_results_state.csv does not exist. Please check the file path.")
}
}
save_to_shiny()
#Step 2: Use Git to add, commit, and push changes to GitHub
push_to_github <- function() {
# Navigate to your local GitHub repository
setwd("/Users/sunmingrun/Documents/GitHub/ElectionGPT/ShinyApp")
# Add the updated files to the staging area
system("git add .")  # Add all changed files, or you can specify the specific file: system('git add path_to_file')
# Commit the changes with a message
system("git commit -m 'Update of Shiny'")
# Push the changes to GitHub
system("git push origin main")
message("Changes pushed to GitHub successfully.")
}
# Run the entire process
push_to_github()
shiny::runApp()
runApp()
data_sentiment<-read.csv("/Users/sunmingrun/Documents/GitHub/ElectionGPT/NLP/JSON_news_data.csv", show_col_types = FALSE)
data_sentiment<-read.csv("/Users/sunmingrun/Documents/GitHub/ElectionGPT/NLP/JSON_news_data.csv")
data_sentiment
data_sentiment <- data_sentiment%>%
select(-"body")
data_sentiment
data_sentiment <- data_sentiment%>%
select(-"body") %>%
group_by("date")
data_sentiment<-read.csv("/Users/sunmingrun/Documents/GitHub/ElectionGPT/NLP/JSON_news_data.csv")
data_sentiment <- data_sentiment%>%
select(-"body") %>%
group_by("date")
data_sentiment
data_sentiment2 <- data_sentiment%>%
select(-"body") %>%
mutate(date = as.Date(Date, format = "%m/%d/%y")) %>%
group_by("date")
data_sentiment<-read.csv("/Users/sunmingrun/Documents/GitHub/ElectionGPT/NLP/JSON_news_data.csv")
data_sentiment2 <- data_sentiment%>%
select(-"body") %>%
mutate(date = as.Date(Date, format = "%m/%d/%y")) %>%
group_by("date")
data_sentiment2 <- data_sentiment%>%
select(-"body") %>%
mutate(date = as.Date(date, format = "%m/%d/%y")) %>%
group_by("date")
data_sentiment2
data_sentiment2 <- data_sentiment%>%
select(-"body")
data_sentiment2
data_sentiment2 <- data_sentiment%>%
select(-"body")
data_sentiment2
data_sentiment2
head(data_sentiment2)
data_sentiment2 <- data_sentiment%>%
select(-"body")%>%
mutate(date = as.Date(date, format = "%Y-%m-%d")) %>%
group_by("date")
data_sentiment2
data_sentiment2 <- data_sentiment%>%
select(-"body")%>%
mutate(date = as.Date(date, format = "%Y-%m-%d")) %>%
group_by("date") %>%
summarise(
avg_sentiment = mean(sentiment, na.rm = TRUE),
No_News = n(),
.groups = 'drop'
data_sentiment2 <- data_sentiment%>%
data_sentiment2 <- data_sentiment%>%
select(-"body")%>%
mutate(date = as.Date(date, format = "%Y-%m-%d")) %>%
group_by("date") %>%
summarise(
avg_sentiment = mean(sentiment, na.rm = TRUE),
No_News = n())
.groups = 'drop'
data_sentiment2
data_sentiment2 <- data_sentiment%>%
select(-"body")%>%
mutate(date = as.Date(date, format = "%Y-%m-%d")) %>%
group_by("date") %>%
summarise(
avg_sentiment = mean(sentiment, na.rm = TRUE),
No_News = n())
.groups = 'drop'
data_sentiment2
data_sentiment2 <- data_sentiment%>%
select(-"body")%>%
mutate(date = as.Date(date, format = "%Y-%m-%d"))
data_sentiment2
data_sentiment2 <- data_sentiment %>%
select(-"body") %>%
mutate(date = as.Date(date, format = "%Y-%m-%d")) %>%
group_by(date) %>%  # Remove quotes around date
summarise(
avg_sentiment = mean(sentiment, na.rm = TRUE),
No_News = n(),
.groups = 'drop'  # Ensure no group is carried forward after summarise
)
data_sentiment2
View(data_sentiment)
View(data_sentiment2)
data_sentiment
data_sentiment2 <- data_sentiment %>%
filter(date=="2024-09-08 ")
data_sentiment2
data_sentiment2 <- data_sentiment %>%
filter(date=="2024-09-08")
data_sentiment2
View(data_sentiment2)
data_sentiment2 <- data_sentiment %>%
filter(date=="2024-09-14")
View(data_sentiment2)
View(data_sentiment2)
data_sentiment3 <- data_sentiment %>%
select(-"body") %>%
mutate(date = as.Date(date, format = "%Y-%m-%d")) %>%
group_by(date) %>%  # Remove quotes around date
summarise(
avg_sentiment = mean(sentiment, na.rm = TRUE),
No_News = n(),
.groups = 'drop'  # Ensure no group is carried forward after summarise
)
# View the resulting tibble
print(data_sentiment3)
View(data_sentiment3)
data_sentiment<-read.csv("/Users/sunmingrun/Documents/GitHub/ElectionGPT/NLP/news_data_csv/combined_news_data_2024.csv")
data_sentiment<-read.csv("/Users/sunmingrun/Documents/GitHub/ElectionGPT/NLP/news_data_csv/combined_news_data_2024.csv")
data_sentiment
data_sentiment<-data_sentiment%>%
select("feed.date","date","sentiment")
data_sentiment
data_sentiment<-data_sentiment%>%
select("feed.date","date","sentiment")%>%
mutate(date = as.Date(date, format = "%Y-%m-%d")) %>%
filter(date>="2024-08-13")
data_sentiment
View(data_sentiment)
data_sentiment<-data_sentiment%>%
select("feed.date","date","sentiment")%>%
mutate(date = as.Date(date, format = "%Y-%m-%d")) %>%
mutate(feed.date = as.Date(feed.date, format = "%Y-%m-%d")) %>%
filter(date>="2024-08-13")%>%
arrange("feed.date")
data_sentiment
View(data_sentiment)
data_sentiment<-data_sentiment%>%
select("feed.date","date","sentiment")%>%
mutate(date = as.Date(date, format = "%Y-%m-%d")) %>%
mutate(feed.date = as.Date(feed.date, format = "%Y-%m-%d")) %>%
filter(date>="2024-08-13")%>%
arrange("feed.date")%>%
group_by(feed.date) %>%  # Remove quotes around date
summarise(
avg_sentiment = mean(sentiment, na.rm = TRUE),
No_News = n(),
.groups = 'drop'  # Ensure no group is carried forward after summarise
)
data_sentiment
View(data_sentiment)
View(data_sentiment3)
View(data_sentiment)
fig <- plot_ly(data_sentiment, x = ~feed.date, y = ~avg_sentiment, type = 'scatter', mode = 'lines',
line = list(color = 'transparent'),
showlegend = FALSE, name = 'Sentiment')
fig <- fig %>% layout(title = "Sentiment Analysis",
paper_bgcolor='rgb(255,255,255)', plot_bgcolor='rgb(229,229,229)',
xaxis = list(title = "Date",
gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE),
yaxis = list(title = "Average Sentiment Score By Day",
gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE))
fig
data_sentiment
fig <- plot_ly(data_sentiment, x = ~feed.date, y = ~avg_sentiment, type = 'scatter', mode = 'lines',
line = list(color = 'transparent'),
showlegend = FALSE, name = 'Sentiment')
fig
fig <- plot_ly(data_sentiment, x = ~feed.date, y = ~avg_sentiment, type = 'scatter', mode = 'lines',
showlegend = FALSE, name = 'Sentiment')
fig
fig <- plot_ly(data_sentiment, x = ~feed.date, y = ~avg_sentiment, type = 'scatter', mode = 'lines',
showlegend = FALSE)
fig <- fig %>% layout(title = "Sentiment Analysis",
paper_bgcolor='rgb(255,255,255)', plot_bgcolor='rgb(229,229,229)',
xaxis = list(title = "Date",
gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE),
yaxis = list(title = "Average Sentiment Score By Day",
gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE))
fig
fig <- plot_ly(data_sentiment, x = ~feed.date, y = ~avg_sentiment, type = 'scatter', mode = 'lines',
showlegend = FALSE, name = 'Sentiment')
fig
fig <- plot_ly(data_sentiment, x = ~feed.date, y = ~avg_sentiment, type = 'scatter', mode = 'lines',
showlegend = FALSE, name = 'Sentiment')
fig <- fig %>% layout(title = "Sentiment Analysis",
paper_bgcolor='rgb(255,255,255)', plot_bgcolor='rgb(229,229,229)',
xaxis = list(title = "Date",
gridcolor = 'rgb(255,255,255)',
showgrid = FALSE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE),
yaxis = list(title = "Average Sentiment Score By Day",
gridcolor = 'rgb(255,255,255)',
showgrid = FALSE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE))
fig
fig <- fig %>% layout(title = "Sentiment Analysis",
#paper_bgcolor='rgb(255,255,255)', plot_bgcolor='rgb(229,229,229)',
xaxis = list(title = "Date",
gridcolor = 'rgb(255,255,255)',
showgrid = FALSE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE),
yaxis = list(title = "Average Sentiment Score By Day",
gridcolor = 'rgb(255,255,255)',
showgrid = FALSE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE))
fig
fig
fig <- plot_ly(data_sentiment, x = ~feed.date, y = ~avg_sentiment, type = 'scatter', mode = 'lines',
showlegend = FALSE, name = 'Sentiment')
fig <- fig %>% layout(title = "Sentiment Analysis",
paper_bgcolor='rgb(255,255,255)', plot_bgcolor='rgb(229,229,229)',
xaxis = list(title = "Date",
#gridcolor = 'rgb(255,255,255)',
showgrid = FALSE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE),
yaxis = list(title = "Average Sentiment Score By Day",
#gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE))
fig
fig
fig <- plot_ly(data_sentiment, x = ~feed.date, y = ~avg_sentiment, type = 'scatter', mode = 'lines',
showlegend = FALSE, name = 'Sentiment')
fig <- fig %>% layout(title = "Sentiment Analysis",
paper_bgcolor='rgb(255,255,255)', plot_bgcolor='rgb(229,229,229)',
xaxis = list(title = "Date",
#gridcolor = 'rgb(255,255,255)',
showgrid = FALSE,
showline = FALSE,
showticklabels = TRUE,
#tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE),
yaxis = list(title = "Average Sentiment Score By Day",
#gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
#tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE))
fig
fig <- plot_ly(data_sentiment, x = ~feed.date, y = ~avg_sentiment, type = 'scatter', mode = 'lines',
showlegend = FALSE)
fig <- fig %>% layout(title = "Sentiment Analysis",
#paper_bgcolor='rgb(255,255,255)', plot_bgcolor='rgb(229,229,229)',
xaxis = list(title = "Date",
#gridcolor = 'rgb(255,255,255)',
showgrid = FALSE,
showline = FALSE,
showticklabels = TRUE,
#tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE),
yaxis = list(title = "Average Sentiment Score By Day",
#gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
#tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE))
fig
pull_and_save_to_shiny <- function() {
# Navigate to your local GitHub repository
setwd("/Users/sunmingrun/Documents/GitHub/ElectionGPT")
# Pull the latest changes from GitHub
system("git commit -m 'update of Shiny'")
system("git pull")
system("git merge")
system("git add .")
system("git pull origin main")
message("Pulled latest changes from GitHub.")
}
pull_and_save_to_shiny()
save_to_shiny <- function() {
# Path to the updated file after pulling from GitHub
source_file_panel <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/data/panel_election_results_state.csv"
# Destination path where the file will be copied to (Shiny folder)
destination_file_panel <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/ShinyApp/panel_election_results_state.csv"
# Check if the file exists, then copy it to the Shiny folder
if (file.exists(source_file_panel)) {
file.copy(from = source_file_panel, to = destination_file_panel, overwrite = TRUE)
message("panel_election_results_state.csv file copied to ShinyApp folder.")
} else {
message("panel_election_results_state.csv does not exist. Please check the file path.")
}
# Path to the expert_combined_panel.csv file after pulling from GitHub
source_file_expert <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/data/expert/expert_combined_panel.csv"
# Destination path for the expert_combined_panel.csv (same folder)
destination_file_expert <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/ShinyApp/expert_combined_panel.csv"
# Check if the file exists, then copy it to the Shiny folder
if (file.exists(source_file_expert)) {
file.copy(from = source_file_expert, to = destination_file_expert, overwrite = TRUE)
message("expert_combined_panel.csv file copied to ShinyApp folder.")
} else {
message("expert_combined_panel.csv does not exist. Please check the file path.")
}
source_file_panel <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/data/panel_control_election_results_state.csv"
# Destination path where the file will be copied to (Shiny folder)
destination_file_panel <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/ShinyApp/panel_control_election_results_state.csv"
# Check if the file exists, then copy it to the Shiny folder
if (file.exists(source_file_panel)) {
file.copy(from = source_file_panel, to = destination_file_panel, overwrite = TRUE)
message("panel_election_results_state.csv file copied to ShinyApp folder.")
} else {
message("panel_election_results_state.csv does not exist. Please check the file path.")
}
}
save_to_shiny()
#Step 2: Use Git to add, commit, and push changes to GitHub
push_to_github <- function() {
# Navigate to your local GitHub repository
setwd("/Users/sunmingrun/Documents/GitHub/ElectionGPT/ShinyApp")
# Add the updated files to the staging area
system("git add .")  # Add all changed files, or you can specify the specific file: system('git add path_to_file')
# Commit the changes with a message
system("git commit -m 'Update of Shiny'")
# Push the changes to GitHub
system("git push origin main")
message("Changes pushed to GitHub successfully.")
}
# Run the entire process
push_to_github()
data_sentiment<-read.csv("/Users/sunmingrun/Documents/GitHub/ElectionGPT/NLP/news_data_csv/combined_news_data_2024.csv")
data_sentiment<-data_sentiment%>%
select("feed.date","date","sentiment")%>%
mutate(date = as.Date(date, format = "%Y-%m-%d")) %>%
mutate(feed.date = as.Date(feed.date, format = "%Y-%m-%d")) %>%
filter(date>="2024-08-13")%>%
arrange("feed.date")%>%
group_by(feed.date) %>%  # Remove quotes around date
summarise(
avg_sentiment = mean(sentiment, na.rm = TRUE),
No_News = n(),
.groups = 'drop'  # Ensure no group is carried forward after summarise
)
fig <- plot_ly(data_sentiment, x = ~feed.date, y = ~avg_sentiment, type = 'scatter', mode = 'lines',
showlegend = FALSE)
fig <- fig %>% layout(title = "Sentiment Analysis",
#paper_bgcolor='rgb(255,255,255)', plot_bgcolor='rgb(229,229,229)',
xaxis = list(title = "Date",
#gridcolor = 'rgb(255,255,255)',
showgrid = FALSE,
showline = FALSE,
showticklabels = TRUE,
#tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE),
yaxis = list(title = "Average Sentiment Score By Day",
#gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
#tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE))
fig
data_sentiment
pull_and_save_to_shiny <- function() {
# Navigate to your local GitHub repository
setwd("/Users/sunmingrun/Documents/GitHub/ElectionGPT")
# Pull the latest changes from GitHub
system("git commit -m 'update of Shiny'")
system("git pull")
system("git merge")
system("git add .")
system("git pull origin main")
message("Pulled latest changes from GitHub.")
}
pull_and_save_to_shiny()
save_to_shiny <- function() {
# Path to the updated file after pulling from GitHub
source_file_panel <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/data/panel_election_results_state.csv"
# Destination path where the file will be copied to (Shiny folder)
destination_file_panel <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/ShinyApp/panel_election_results_state.csv"
# Check if the file exists, then copy it to the Shiny folder
if (file.exists(source_file_panel)) {
file.copy(from = source_file_panel, to = destination_file_panel, overwrite = TRUE)
message("panel_election_results_state.csv file copied to ShinyApp folder.")
} else {
message("panel_election_results_state.csv does not exist. Please check the file path.")
}
# Path to the expert_combined_panel.csv file after pulling from GitHub
source_file_expert <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/data/expert/expert_combined_panel.csv"
# Destination path for the expert_combined_panel.csv (same folder)
destination_file_expert <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/ShinyApp/expert_combined_panel.csv"
# Check if the file exists, then copy it to the Shiny folder
if (file.exists(source_file_expert)) {
file.copy(from = source_file_expert, to = destination_file_expert, overwrite = TRUE)
message("expert_combined_panel.csv file copied to ShinyApp folder.")
} else {
message("expert_combined_panel.csv does not exist. Please check the file path.")
}
source_file_panel <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/data/panel_control_election_results_state.csv"
# Destination path where the file will be copied to (Shiny folder)
destination_file_panel <- "/Users/sunmingrun/Documents/GitHub/ElectionGPT/ShinyApp/panel_control_election_results_state.csv"
# Check if the file exists, then copy it to the Shiny folder
if (file.exists(source_file_panel)) {
file.copy(from = source_file_panel, to = destination_file_panel, overwrite = TRUE)
message("panel_election_results_state.csv file copied to ShinyApp folder.")
} else {
message("panel_election_results_state.csv does not exist. Please check the file path.")
}
}
save_to_shiny()
#Step 2: Use Git to add, commit, and push changes to GitHub
push_to_github <- function() {
# Navigate to your local GitHub repository
setwd("/Users/sunmingrun/Documents/GitHub/ElectionGPT/ShinyApp")
# Add the updated files to the staging area
system("git add .")  # Add all changed files, or you can specify the specific file: system('git add path_to_file')
# Commit the changes with a message
system("git commit -m 'Update of Shiny'")
# Push the changes to GitHub
system("git push origin main")
message("Changes pushed to GitHub successfully.")
}
# Run the entire process
push_to_github()
